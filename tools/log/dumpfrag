#!/usr/bin/env python3

import sys
from logutils.iterator import LogIterator
from logutils.visitor import LogEventVisitor

class DataDim:
    def __init__(self, name):
        self._data = []
        self.name = name

    def append(self, val):
        self._data.append(val)

    def __len__(self):
        return len(self._data)

    def __getitem__(self, index):
        return self._data[index]

class Data:
    def __init__(self, name):
        self.name = name
        self._dims = []

    def add_dim(self, dim):
        self._dims.append(dim)

    def append_line(self, line):
        assert len(line) == len(self._dims)
        for i in range(len(line)):
            self._dims[i].append(line[i])

    def dump(self):
        assert len(self._dims) > 0
        # Name
        print("# {}".format(self.name))
        # Dimension names
        for dim in self._dims:
            print(dim.name, end='\t')
        print()
        # Values
        for i in range(len(self._dims[0])):
            for dim in self._dims:
                print(dim[i], end='\t')
            print()

class FragmentationVisitor(LogEventVisitor):
    def __init__(self):
        self.data = Data("Fragmentation & Memusage")
        self.data.add_dim(DataDim("Time"))
        self.data.add_dim(DataDim("Fragmentation"))
        self.data.add_dim(DataDim("Memory Usage"))
        self.data.add_dim(DataDim("Arenas"))
        self.data.add_dim(DataDim("Allocated Arenas"))

    def visit_log_start(self, event):
        self.arena_cells = (event.arena_cells * 63) // 64 // 16

    def visit_sweep_start(self, event):
        total = event.arenas * self.arena_cells
        assert total >= event.free_cells
        utilization = (total - event.free_cells) / total
        self.data.append_line([event.time(), '-', utilization,
            event.arenas, event.arenas * utilization])

    def visit_sweep_done(self, event):
        total = event.arenas * self.arena_cells;
        assert total >= event.free_cells
        if event.free_cells > 0:
            fragmentation = 1 - event.largest_free_block / event.free_cells
        else:
            fragmentation = 0
        utilization = (total - event.free_cells) / total
        self.data.append_line([event.time(), fragmentation, utilization,
            event.arenas, event.arenas * utilization])

def print_data(filename):
    log = LogIterator(filename)
    v = FragmentationVisitor()
    for event in log:
        event.accept(v)

    v.data.dump()

if __name__ == "__main__":
    for filename in sys.argv[1:]:
        print_data(filename)
