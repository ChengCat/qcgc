#!/usr/bin/env python3

import sys
from statistics import mean
from logutils.iterator import LogIterator
from logutils.visitor import LogEventVisitor

class SummaryVisitor(LogEventVisitor):
    def __init__(self):
        self.fullmark = []
        self.incmark = []
        self.sweep = []
        self.arenas = []
        self.collect_pause = []
        self.memory_usage_before = []
        self.memory_usage_after = []
        self.fragmentation = []
        self.total_time = 0.0
        #
        self._log_start = 0.0
        self._mark_start = 0.0
        self._sweep_start = 0.0
        self._collect_start = 0.0

    def visit_log_start(self, event):
        self.log_start = event.time()
        self.arena_cells = (event.arena_cells * 63) // 64 // 16

    def visit_log_stop(self, event):
        self.total_time = event.time() - self._log_start

    def visit_sweep_start(self, event):
        self._sweep_start = event.time()
        self.arenas.append(event.arenas)
        total = event.arenas * self.arena_cells
        self.memory_usage_before.append((total - event.free_cells) / total)

    def visit_sweep_done(self, event):
        self.sweep.append(event.time() - self._sweep_start)
        total = event.arenas * self.arena_cells
        self.memory_usage_after.append((total - event.free_cells) / total)
        if event.free_cells > 0:
            fragmentation = 1 - event.largest_free_block / event.free_cells
        else:
            fragmentation = 0
        self.fragmentation.append(fragmentation)
        self.collect_pause.append(event.time() - self._collect_start)

    def visit_mark_start(self, event):
        self._mark_start = event.time()
        if not event.incremental:
            self._collect_start = event.time()

    def visit_mark_done(self, event):
        if event.incremental:
            self.incmark.append(event.time() - self._mark_start)
        else:
            self.fullmark.append(event.time() - self._mark_start)

def print_summary(filename):
    log = LogIterator(filename)
    v = SummaryVisitor()
    for event in log:
        event.accept(v)
    #
    if v.total_time == 0:
        print("Log did not stop, analysis results can't be displayed")
    else:
        Mark_Time = sum(v.incmark) + sum(v.fullmark)
        GC_Time = Mark_Time + sum(v.sweep)
        print("Normal Execution             : {:.2%}".format((v.total_time - GC_Time) / v.total_time))
        print("Longest GC Pause             : {:.6f}ms".format(max(v.collect_pause + v.incmark + v.fullmark + v.sweep) * 1000))
        print("Avg GC Pause                 : {:.6f}ms".format(mean(v.collect_pause + v.incmark) * 1000))
        print("Marking                      : {:.2%}".format(Mark_Time / v.total_time))
        print("  incremental                : {:.2%}".format(sum(v.incmark) / Mark_Time))
        print("    min pause                : {:.6f}ms".format(min(v.incmark) * 1000))
        print("    avg pause                : {:.6f}ms".format(mean(v.incmark) * 1000))
        print("    max pause                : {:.6f}ms".format(max(v.incmark) * 1000))
        print("  non-incremental            : {:.2%}".format(sum(v.fullmark) / Mark_Time))
        print("    min pause                : {:.6f}ms".format(min(v.fullmark) * 1000))
        print("    avg pause                : {:.6f}ms".format(mean(v.fullmark) * 1000))
        print("    max pause                : {:.6f}ms".format(max(v.fullmark) * 1000))
        print("Sweeping                     : {:.2%}".format(sum(v.sweep) / v.total_time))
        print("  count                      : {:d}".format(len(v.sweep)))
        print("  avg arenas allocated       : {:2f}".format(mean(v.arenas)))
        print("  max arenas allocated       : {:d}".format(max(v.arenas)))
        print("  avg per arena              : {:.6f}".format(sum(v.sweep) / sum(v.arenas) * 1000))
        print("  min pause                  : {:.6f}ms".format(min(v.sweep) * 1000))
        print("  avg pause                  : {:.6f}ms".format(mean(v.sweep) * 1000))
        print("  max pause                  : {:.6f}ms".format(max(v.sweep) * 1000))
        print("  Memory Usage before Sweep")
        print("    min                      : {:.2%}".format(min(v.memory_usage_before)))
        print("    avg                      : {:.2%}".format(mean(v.memory_usage_before)))
        print("    max                      : {:.2%}".format(max(v.memory_usage_before)))
        print("  Memory Usage after Sweep")
        print("    min                      : {:.2%}".format(min(v.memory_usage_after)))
        print("    avg                      : {:.2%}".format(mean(v.memory_usage_after)))
        print("    max                      : {:.2%}".format(max(v.memory_usage_after)))
        print("  Overall Memory Usage")
        print("    min                      : {:.2%}".format(min(v.memory_usage_before + v.memory_usage_after)))
        print("    avg                      : {:.2%}".format(mean(v.memory_usage_before + v.memory_usage_after)))
        print("    max                      : {:.2%}".format(max(v.memory_usage_before + v.memory_usage_after)))
        print("  Fragmentation")
        print("    min                      : {:.2%}".format(min(v.fragmentation)))
        print("    avg                      : {:.2%}".format(mean(v.fragmentation)))
        print("    max                      : {:.2%}".format(max(v.fragmentation)))

if __name__ == "__main__":
    for filename in sys.argv[1:]:
        print_summary(filename)
