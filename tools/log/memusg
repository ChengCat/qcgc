#!/usr/bin/env python3

import sys
from statistics import mean
from logutils.iterator import LogIterator
from logutils.visitor import LogEventVisitor

class SummaryVisitor(LogEventVisitor):
    def __init__(self):
        self.fullmark = []
        self.incmark = []
        self.sweep = []
        self.arenas = []
        self.collect_pause = []
        self.memory_usage_before = []
        self.memory_usage_after = []
        self.fragmentation = []
        self.total_time = 0.0
        #
        self._log_start = 0.0
        self._mark_start = 0.0
        self._sweep_start = 0.0
        self._collect_start = 0.0

    def visit_log_start(self, event):
        self.log_start = event.time()
        self.arena_cells = (event.arena_cells * 63) // 64

    def visit_log_stop(self, event):
        self.total_time = event.time() - self._log_start

    def visit_sweep_start(self, event):
        self._sweep_start = event.time()
        self.arenas.append(event.arenas)
        total = event.arenas * self.arena_cells
        self.memory_usage_before.append((total - event.free_cells) / total)

    def visit_sweep_done(self, event):
        self.sweep.append(event.time() - self._sweep_start)
        total = event.arenas * self.arena_cells
        self.memory_usage_after.append((total - event.free_cells) / total)
        if event.free_cells > 0:
            fragmentation = 1 - event.largest_free_block / event.free_cells
        else:
            fragmentation = 0
        self.fragmentation.append(fragmentation)
        self.collect_pause.append(event.time() - self._collect_start)

    def visit_mark_start(self, event):
        self._mark_start = event.time()
        if not event.incremental:
            self._collect_start = event.time()

    def visit_mark_done(self, event):
        if event.incremental:
            self.incmark.append(event.time() - self._mark_start)
        else:
            self.fullmark.append(event.time() - self._mark_start)

def print_summary(filename):
    log = LogIterator(filename)
    v = SummaryVisitor()
    for event in log:
        event.accept(v)
    #
    if v.total_time == 0:
        print("Log did not stop, analysis results can't be displayed")
    else:
        print("Arenas")
        for a in v.arenas:
            print(a)

if __name__ == "__main__":
    for filename in sys.argv[1:]:
        print_summary(filename)
